import java.io.*;
import java.util.*;

public class Dominos {
    static int n;
    static int time;
    static ArrayList<Integer>[] adj;
    static boolean[] state;
    static int[] d; //tiempo descubrimiento de cada vertice
    static int[] t; //tiempo de finalizacion de cada vertice(vecinos ya visitads del vertice actual)
    static  Stack<Integer>Toposort;
    public static void main(String[] args) throws Exception {

        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(in.readLine());
        for (int i = 0; i < t; i++) {
            StringTokenizer st = new StringTokenizer(in.readLine());
            n = Integer.parseInt(st.nextToken());
            int m = Integer.parseInt(st.nextToken());
            adj = new ArrayList[n];
            for (int j = 0; j < n; j++)
                adj[j] = new ArrayList<>();
            for (int k = 0; k < m; k++) {
                st = new StringTokenizer(in.readLine());
                int a = Integer.parseInt(st.nextToken())-1;
                int b = Integer.parseInt(st.nextToken())-1;
                adj[a].add(b);
            }
            int []ans = TopSort();
            System.out.println(solve(ans));
        }
    }
    static int solve(int []topo){
        int count= 0;
        Arrays.fill(state,false);
        for (int element:topo) {
            if(!state[element]){
                dfs(element);
                count++;
            }
        }
        return count;
    }
    static void dfs(int s){
        state[s] = true;
        for(int v: adj[s])
            if(!state[v])
                dfs(v);
    }
    static void dfsT(int s){
        d[s] = time;
        time++;
        state[s] = true;
        for(int v: adj[s])
            if(!state[v])
                dfsT(v);
        t[s] = time;
        time++;
        Toposort.add(s);
    }
    static int[] TopSort() {
        time = 1;
        d = new int[n];
        t = new int[n];
        state = new boolean[n];
        Toposort = new Stack<>();
        for (int i = 0; i < n; i++)
            if (!state[i]) dfsT(i);
        int ans[] = new int[n];
        for (int i = 0;i<n;i++)
            ans[i] = Toposort.pop();
        return ans;
    }
}
