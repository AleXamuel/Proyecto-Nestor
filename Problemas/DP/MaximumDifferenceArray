#Given an array nums of size n, find the maximum difference between nums[i] and nums[j] (i.e., nums[j] - nums[i]), such that 0 <= i < j < n and nums[i] < nums[j]
#Return the maximum difference. If no such i and j exists, return -1

#Solution time O(n^2), brute force approach
def maximumDifference(nums):
    ans = -1
    n = len(nums)
    for i in range(n):
        for j in range(i+1,n):
            if nums[i] < nums[j]:
                ans = max(ans,nums[j]-nums[i])
    return ans

#Solution time O(nlogn), divide and conquer approach
def maximumDifference(nums):
    n = len(nums)
    if n==1:
        return 0
    if n==2:
        if nums[1]>nums[0]:
            return nums[1]-nums[0]
        return -1
    I = maximumDifference(nums[:n//2])
    D = maximumDifference(nums[n//2:n])
    minI = min(nums[:n//2])
    maxD = max(nums[n//2:n])
    ans = max(I,D,maxD-minI)
    return -1 if ans==0 else ans

#There is a solution with time O(n)
